rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /trips/{tripId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update: if request.auth != null 
        && request.resource.data.driverId == request.auth.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /deliveries/{deliveryId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null 
        && request.resource.data.driverId == request.auth.uid;
    }
    match /feedback/{feedbackId} {
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null;
    }
    match /drivers/{driverId} {
      allow read, write: if request.auth != null && request.auth.uid == driverId;
    }
    match /users/{userId} {
      function isNotRestricted() {
        return !exists(/databases/$(database)/documents/users/$(request.auth.uid)) ||
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status != 'restricted';
      }
      
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Only allow access to new orders if not restricted
      match /orders/{orderId} {
        allow read, write: if request.auth != null && isNotRestricted();
      }
    }
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
